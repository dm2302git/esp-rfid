void connectToMqtt() {
#ifdef DEBUG
	Serial.println("[ INFO ] try to connect mqtt ");
#endif
	mqttClient.connect();
}

void onMqttDisconnect(AsyncMqttClientDisconnectReason reason) {
	String reasonstr = "";
	switch (reason) {
	case (AsyncMqttClientDisconnectReason::TCP_DISCONNECTED):
		reasonstr = "TCP_DISCONNECTED";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_UNACCEPTABLE_PROTOCOL_VERSION):
		reasonstr = "MQTT_UNACCEPTABLE_PROTOCOL_VERSION";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_IDENTIFIER_REJECTED):
		reasonstr = "MQTT_IDENTIFIER_REJECTED";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_SERVER_UNAVAILABLE):
		reasonstr = "MQTT_SERVER_UNAVAILABLE";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_MALFORMED_CREDENTIALS):
		reasonstr = "MQTT_MALFORMED_CREDENTIALS";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_NOT_AUTHORIZED):
		reasonstr = "MQTT_NOT_AUTHORIZED";
		break;
	case (AsyncMqttClientDisconnectReason::ESP8266_NOT_ENOUGH_SPACE):
		reasonstr = "ESP8266_NOT_ENOUGH_SPACE";
		break;
	default:
		reasonstr = "Unknown";
		break;
	}
	writeEvent("WARN", "mqtt", "Disconnected from MQTT server", reasonstr);

	if (WiFi.isConnected()) {
		//mqttClient.setServer(mhs, mport);
		mqttReconnectTimer.once(60, connectToMqtt);
	}
}



void mqtt_publish_boot(time_t boot_time, String const &wifi, String const &ip) {
	const char *topic = mqttTopic;
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["type"] = "boot";
	root["time"] = boot_time;
	root["Wifi SSID"] = wifi;
	root["Local IP"] = ip;
	String mqttBuffer_boot;
	root.printTo(mqttBuffer_boot);
	mqttClient.publish(topic, 0, false, mqttBuffer_boot.c_str());
#ifdef DEBUG
	Serial.print("[ INFO ] Mqtt Publish:");
	Serial.println(mqttBuffer_boot);
#endif
}



void mqtt_publish_heartbeat(time_t heartbeat) {
	String stopic (mqttTopic);
 	DynamicJsonBuffer jsonBuffer;

	stopic = stopic + "/sync";
	JsonObject &root = jsonBuffer.createObject();
	root["type"] 		 = "heartbeat";
	root["time"] 		 = heartbeat;
    root["ip"]   	 = WiFi.localIP().toString();
	root["door"] 		 = deviceHostname;
	
	// Publish Wifi Strength with hearthbeat + ToDo split in function
	int dBm = WiFi.RSSI();
	int percentage;
	if (dBm <= -100) percentage = 0;
	else if (dBm >= -50) percentage = 100;
	else percentage = 2 * (dBm + 100);
   	root["WIFIstrength%"] = percentage;

	String mqttBuffer4;
	root.printTo(mqttBuffer4);
	mqttClient.publish(stopic.c_str(), 0, false, mqttBuffer4.c_str());
	#ifdef DEBUG
		Serial.print("[ INFO ] Mqtt Publish:");
		Serial.println(mqttBuffer4);
	#endif
}

void mqtt_publish_access(time_t accesstime, String const &isknown, String const &type, String const &user, String const &uid) {
	if (mqttClient.connected()) {
		String stopic (mqttTopic);
 		stopic = stopic + "/send";

		DynamicJsonBuffer jsonBuffer;
		JsonObject &root = jsonBuffer.createObject();
		// log to MQTT adding cmd command
		if (mqttEvents){
        	root["cmd"] = "log";
		}
		root["type"] = "access";
		root["time"] = accesstime;
		root["isKnown"] = isknown;
		root["access"] = type;
		root["username"] = user;
		root["uid"] = uid;
		root["door"] = deviceHostname;
		String mqttBuffer;
		root.printTo(mqttBuffer);
		mqttClient.publish(stopic.c_str(), 0, false, mqttBuffer.c_str());
		#ifdef DEBUG
			Serial.print("[ INFO ] Mqtt Publish:");
			Serial.println(mqttBuffer);
		#endif
	}
}

void mqtt_publish_event(JsonObject *root) {
	if (mqttClient.connected()) {
		String stopic (mqttTopic);
 		stopic = stopic + "/send";
		String mqttBuffer;
		root->printTo(mqttBuffer);
		mqttClient.publish(stopic.c_str(), 0, false, mqttBuffer.c_str());
	}
}

void onMqttPublish(uint16_t packetId) {
	writeEvent("INFO", "mqtt", "MQTT publish acknowledged", String(packetId));
}


uint16_t sendNextUserFile(Dir &dir, String &stopic){
	String uid = dir.fileName();
	uid.remove(0, 3);
	File f = SPIFFS.open(dir.fileName(), "r");
	size_t size = f.size();
	std::unique_ptr<char[]> buf(new char[size]);
	f.readBytes(buf.get(), size);

	DynamicJsonBuffer jsonBuffer;
	JsonObject &json = jsonBuffer.parseObject(buf.get());
	
	if (json.success()) {
		if (mqttClient.connected()) {
			String mqttBuffer;
			json.printTo(mqttBuffer);
			uint16_t success = 0;
			success = mqttClient.publish(stopic.c_str(), 1, true, mqttBuffer.c_str());

		#ifdef DEBUG
			Serial.print("[ INFO ] Mqtt Publish:");
		//	Serial.println(mqttBuffer);
			Serial.print("  Success: "); 
			Serial.println(success); 
		#endif
		}
	}
}

void ICACHE_FLASH_ATTR getUserList(int todo) {
	String stopic (mqttTopic);
	if (todo == 0)  // Userlist to add to DB
 		stopic = stopic + "/accesslist";
	else if (todo == 1) // Just for List
		stopic = stopic + "/send";
	/* DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	JsonArray &users = root.createNestedArray("list"); */
	Dir dir = SPIFFS.openDir("/P/");
	#ifdef DEBUG
		Serial.println("[ INFO ] getUserList");
	#endif	
	/* uint32_t loopCount=0; */

	while (dir.next()) {
		sendNextUserFile(dir, stopic);
		/* loopCount++;
		Serial.println(loopCount); */

	}
}





void DeleteAllUserFiles(){
	Dir dir = SPIFFS.openDir("/P/");
	while (dir.next()) {
			String uid = dir.fileName();
			uid.remove(0, 3);
			SPIFFS.remove(dir.fileName());
	}
}

void DeleteUserID(const char *uid){
	// only do this if a user id has been provided
	if ( uid ){
		Dir dir = SPIFFS.openDir("/P/");
		while (dir.next()) {
				String user_id = dir.fileName();
				String myuid = uid;
				user_id.remove(0, 3);
				if (myuid == user_id){
					SPIFFS.remove(dir.fileName());
				}
		}
	}
}

void onMqttMessage(char* topic, char* payload, AsyncMqttClientMessageProperties properties, size_t len, size_t index, size_t total) {
	char jjson[total + 1] ;
	memcpy(jjson,payload,total);
    jjson[total+1]='\0';
	String espIp =  WiFi.localIP().toString();
	Serial.println(espIp);
	StaticJsonBuffer<255> jsonBuffer;
	#ifdef DEBUG
		Serial.print("[ INFO ] JSON msg :");
		Serial.println(jjson);
	#endif

	JsonObject &root = jsonBuffer.parseObject(jjson);
	if (!root.success()){
		#ifdef DEBUG
			Serial.print("[ INFO ] Failed parse MQTT message :");
			Serial.println(jjson);
		#endif
		return;
	}

	// Check if IP was send with command because we only
	// accept commands for this where sent IP is equal to device IP
	// ToDo: Also accept only if device name is equal
	if (root.containsKey("doorip")){
		const char *ipadr = root["doorip"];

		if (!((strcmp(ipadr, espIp.c_str())==0) && (ipadr != NULL))){
			#ifdef DEBUG
				Serial.print("[ INFO ] ESP  IP: ");
				Serial.println(espIp);
				Serial.print("[ INFO ] recv IP: ");
				Serial.println(ipadr);
			#endif
			return;
		}
	}
	else{
		return;
	}

	////////////////////////////////////////////////////////////
  	// CASE FOR MQTT
  	////////////////////////////////////////////////////////////
	const char *command = root["cmd"];
	// Check whatever the command is and act accordingly
	if (strcmp(command, "getuser") == 0){
		#ifdef DEBUG
			Serial.println("[ MARE ] Get User List");
		#endif
		getUserList(0);
		return;
	}

	else if (strcmp(command, "listusr") == 0){
		unsigned int cmdskip = 0;
		unsigned int cmdtake = 0;
		if (root.containsKey("skip"))	cmdskip = root["skip"];
		else	cmdskip = 0;
		
		if (root.containsKey("take"))	cmdtake = root["take"];
		else	cmdtake = 0;

		#ifdef DEBUG
			Serial.print("[ INFO ] List users");
			Serial.print(" | skip: ");
			Serial.print(cmdskip);
			Serial.print(" | take: ");
			Serial.println(cmdtake);
		#endif	

		//getUserList(1, cmdskip, cmdtake);
		getUserList(1);
		return;
	}

	else if (strcmp(command, "opendoor") == 0){
		#ifdef DEBUG
			Serial.println("[ INFO ] Door open command");
		#endif

		// DEFINE statusacctype
		int statusacctype[MAX_NUM_RELAYS];

		// todo: for Schleife mit "numRelays" im Folgenden
		statusacctype[0] = root["acctype1"];
		statusacctype[1] = root["acctype2"];
		statusacctype[2] = root["acctype3"];
		statusacctype[3] = root["acctype4"];
		statusacctype[4] = root["acctype5"];
		statusacctype[5] = root["acctype6"];

		#ifdef DEBUG
			Serial.print("[ INFO ] Status acctype1 :");
			Serial.println(statusacctype[0]);

			Serial.print("[ INFO ] Status acctype2 :");
			Serial.println(statusacctype[1]);

			Serial.print("[ INFO ] Status acctype3 :");
			Serial.println(statusacctype[2]);

			Serial.print("[ INFO ] Status acctype4 :");
			Serial.println(statusacctype[3]);

			Serial.print("[ INFO ] Status acctype5 :");
			Serial.println(statusacctype[4]);

			Serial.print("[ INFO ] Status acctype6 :");
			Serial.println(statusacctype[5]);
		#endif

		for (size_t i = 0; i < MAX_NUM_RELAYS; i++)
		{
			if (statusacctype[i] == ACCESS_GRANTED) {
				activateRelay[i] = true;
			}
		}
		
		previousMillis = millis();
		return;
	}


	else if (strcmp(command, "deletusers") == 0){
		#ifdef DEBUG
			Serial.println("[ INFO ] Delete all users");
		#endif
		DeleteAllUserFiles();
		return;
	}

	else if (strcmp(command, "deletuid") == 0){
		#ifdef DEBUG
			Serial.println("[ INFO ] Delete a single user by uid");
		#endif
		const char *uid = root["uid"];
		DeleteUserID(uid);
		return;
	}

	else if (strcmp(command, "adduser") == 0){

		#ifdef DEBUG
			Serial.print("[ INFO ] Add User: ");
			const char *name = root["user"];
			Serial.println(name);
		#endif

		const char *uid = root["uid"];
		String filename = "/P/";
		filename += uid;
		File f = SPIFFS.open(filename, "w+");
		// Check if we created the file
		if (f){
			root.printTo(f);
		}
		f.close();
		return;
	}

	#ifdef DEBUG
		Serial.println("[ INFO ] No such command!");
	#endif	

	return;
}


void onMqttSubscribe(uint16_t packetId, uint8_t qos) {
	#ifdef DEBUG
		Serial.println("[ INFO ] Subscribe acknowledged.");
		Serial.print("[ INFO ] packetId: ");
		Serial.println(packetId);
		Serial.print("[ INFO ] qos: ");
		Serial.println(qos);
	#endif
}

void onMqttConnect(bool sessionPresent) {
	#ifdef DEBUG
		Serial.println("[ INFO ] MQTT Connected session");
	#endif
	if (sessionPresent == true) {
		#ifdef DEBUG
			Serial.println("[ INFO ]MQTT session Present: True");
		#endif
		writeEvent("INFO", "mqtt", "Connected to MQTT Server", "Session Present");
	}
	mqtt_publish_boot(now(), WiFi.SSID(), WiFi.localIP().toString());

	uint16_t packetIdSub = mqttClient.subscribe(mqttTopic, 2);

	#ifdef DEBUG
		Serial.print("[ INFO ] Subscribing at QoS 2, packetId: ");
  		Serial.println(packetIdSub);
	#endif


}